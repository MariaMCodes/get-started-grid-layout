/* Defining Grid Areas */

body {
    margin: 40px;
}

.sidebar {
    grid-area: sidebar;
}

.content {
    grid-area: content;
}

.header {
    grid-area: header;
}


/* We can create named areas on the grid to put content into. To do this we first assign elements in our markup to a Grid Area, using the grid-area property.

We can then use the grid-template-areas property to describe where on the Grid these elements should sit.

Repeating the name of an area indicates that the area spans that grid track. Using a . or a sequence like .... indicates an empty track. Such as the very first cell on this grid. */

.wrapper {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: 120px 120px 120px;
    grid-template-areas: "....... header  header" "sidebar content content";
    /*... means no cell*/
    background-color: #fff;
    color: #444;
}

.box {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.header {
    background-color: #999;
}


/* No clearing required */


/* If I add a footer to my markup and define a grid-area and place it on the grid using grid-template-areas you can see that it sits below the content column. There is no clearing required as this footer has a track on the grid, it canâ€™t hop up into another track.

This example also shows the issue described in example 5, by default the background on the sidebar should stretch to full height, in a similar way to the defaults for Flexbox. */

.footer {
    grid-area: footer;
}

.wrapper2 {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: 120px 120px 120px;
    grid-template-areas: "....... header header" "sidebar content content" "footer  footer  footer";
    background-color: #fff;
    color: #444;
}

.box2 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 10px;
    font-size: 150%;
}

.header,
.footer {
    background-color: #999;
}


/* Redefining Grid Areas with Media Queries */


/* We can easily redefine the grid and the position of the elements on it using Media Queries. I define the Grid Areas as before outside of the Media Queries and then redefine the Grid Tracks and the position of the elements onto that grid inside my Media Queries. */

.sidebar2 {
    grid-area: sidebar2;
}

.wrapper3 {
    background-color: #fff;
    color: #444;
}

.wrapper3 {
    display: grid;
    grid-gap: 1em;
    grid-template-areas: "header" "sidebar" "content" "sidebar2" "footer"
}


/* Use @media querie for adjusting screen size */

@media only screen and (min-width: 500px) {
    .wrapper3 {
        grid-template-columns: 20% auto;
        /* at min-width 500px there are only 2 columns with size of column 2 - content set to auto */
        grid-template-areas: "header   header" "sidebar  content" "sidebar2 sidebar2" "footer   footer";
    }
}

@media only screen and (min-width: 600px) {
    .wrapper3 {
        grid-gap: 20px;
        grid-template-columns: 120px auto 120px;
        /* at min-width 600px there are only 3 columns with size of c120px auto 120px */
        grid-template-areas: "header  header  header" "sidebar content sidebar2" "footer  footer  footer";
        max-width: 600px;
    }
}

.box3 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 10px;
    font-size: 150%;
}

.header,
.footer {
    background-color: #999;
}

.sidebar2 {
    background-color: #ccc;
    color: #444;
}


/* Source Independence */


/* A key thing in Grid is that the order of items in the source does not matter, as long as they are children of the element that has been declared as a grid. In this example I have some content and then some ads which I have placed right at the bottom of the source. I can use Grid to visually display these in between sections of content.

I could then use Media Queries to display them elsewhere in a wider layout.

Important! For accessibility purposes the logical order should be set in the source. Do not use Grid properties to adjust the logical order of your document. */

.box4 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    margin: 20px 0 20px 0;
    font-size: 150%;
}

.wrapper4 {
    width: 400px;
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto;
    background-color: #fff;
    color: #444;
}

.section1 {
    grid-row: 1 / 2;
}

.section2 {
    grid-row: 3 / 4;
}

.section3 {
    grid-row: 5 / 6;
}

.ad1 {
    grid-row: 2 / 3;
}

.ad2 {
    grid-row: 4 / 5;
}