body {
    margin: 40px;
}


/* Placing items onto the grid - line-based placement */


/* Using the Grid I defined in example 1, I am positioning the elements in my markup (six divs with a class of box and classes from a to f) using line-based placement properties. This example is more verbose than it needs to be as a demonstration of the properties. In reality if an item will only span one grid track you may omit the -end value. */

.wrapper {
    display: grid;
    grid-template-columns: 100px 100px 100px;
    grid-gap: 10px;
    background-color: #fff;
    color: #444;
}

.box,
.item {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.a {
    grid-column-start: 2;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 2;
}


/* .a {
    grid-column: 2 / 3;
    grid-row: 1 / 2;
  } */


/* .a {
    grid-area: 1 / 2 / 2 / 3;
  } */

.b {
    grid-column-start: 2;
    grid-column-end: 3;
    grid-row-start: 2;
    grid-row-end: 3;
}


/*   .b {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
  } */


/* .b {
    grid-area: 2 / 2 / 3 / 3;
  } */

.c {
    grid-column-start: 3;
    grid-column-end: 4;
    grid-row-start: 2;
    grid-row-end: 3;
}


/* .c {
    grid-column: 3 / 4;
    grid-row: 2 / 3;
  } */


/* .c {
    grid-area: 2 / 3 / 3 / 4;
  } */

.d {
    grid-column-start: 1;
    grid-column-end: 2;
    grid-row-start: 1;
    grid-row-end: 2;
}


/* .d {
    grid-column: 1 / 2;
    grid-row: 1 / 2;
  } */


/* .d {
    grid-area: 1 / 1 / 2 / 2;
  } */

.e {
    grid-column-start: 1;
    grid-column-end: 2;
    grid-row-start: 2;
    grid-row-end: 3;
}


/* .e {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
  } */


/* .e {
    grid-area: 2 / 1 / 3 / 2;
  } */

.f {
    grid-column-start: 3;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 2;
}


/* .f {
    grid-column: 3 / 4;
    grid-row: 1 / 2;
  } */


/* .f {
    grid-area: 1 / 3 / 2 / 4;
  } */


/* Line-based placement named lines*/

.wrapper-namedlines {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: [col1-start] 100px [col2-start] 100px [col3-start] 100px [col3-end];
    grid-template-rows: [row1-start] auto [row2-start] auto [row2-end];
    background-color: #fff;
    color: #444;
}

.aa {
    grid-column: col1-start / col3-start;
    grid-row: row1-start;
}

.bb {
    grid-column: col3-start;
    grid-row: row1-start / row2-end;
}

.cc {
    grid-column: col1-start;
    grid-row: row2-start;
}

.dd {
    grid-column: col2-start;
    grid-row: row2-start;
}


/* Line-based placement named lines with spans */

.wrapper-namedlinesspan {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: [col] 100px [col] 100px [col] 100px [col] 100px;
    grid-template-rows: [row] auto [row] auto [row];
    background-color: #fff;
    color: #444;
}


/* OR Using Repeat notation

.wrapper {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(4, [col] 100px ) ;
    grid-template-rows: repeat(3, [row] auto  );
    background-color: #fff;
    color: #444;
  } */

.aaa {
    grid-column: col / span 2;
    grid-row: row;
}

.bbb {
    grid-column: col 3 / span 2;
    grid-row: row;
}

.ccc {
    grid-column: col;
    grid-row: row 2;
}

.ddd {
    grid-column: col 2 / span 3;
    grid-row: row 2;
}

.eee {
    grid-column: col / span 4;
    grid-row: row 3;
}


/* Sizing of tracks and items - Percentage-based grids and gaps */


/* A grid with a width of 90%. Six column tracks of 10% each, 5 gutter tracks of 2% each.

The grid-gap property controls columns and rows but as the grid has no height, the row gap resolves to 0. */

* {
    box-sizing: border-box
}

.box2 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.box2:nth-child(even) {
    background-color: #ccc;
    color: #000;
}

.wrapper2 {
    width: 90%;
    display: grid;
    grid-gap: 2%;
    grid-template-columns: repeat(6, 10%);
    border: 1px solid #000;
    margin-bottom: 2em;
}


/* If we give the grid a height, there is something for 2% to be a percentage of. So we get a gap. */

.with-height {
    height: 400px;
}


/* A simple minmax example */


/* In this example I am creating a three column track grid. The first column track has a minimum width of 200px and a maximum of 1fr defined using minmax() notation. The other two tracks are fixed at 200 pixels. */

.wrapper3 {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: minmax(200px, 1fr) 200px 200px;
    background-color: #fff;
    color: #444;
}

.box3 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}


/* minmax() and spanning columns and rows */


/* In this example I am creating a grid that contains as many 200 pixel column tracks as will fit into the container with the remaining space shared equally between the columns. In the minmax() function the first value is the minimum size I want my tracks to be, the second is the maximum. By using 1fr as the maximum value the space is equally distributed.

I am then spanning columns and rows. As the items are auto-placed on our flexible grid they will move around the grid but maintain their spanned size. */

.wrapper4 {
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    background-color: #fff;
    color: #444;
}

.box4 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.a2 {
    grid-column: auto / span 2;
}

.k {
    grid-column: auto / span 3;
}

.g {
    grid-column: auto / span 2;
    grid-row: auto / span 2;
}