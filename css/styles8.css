body {
    margin: 40px;
    font: 80% Arial, Helvetica, sans-serif;
}

.box {
    border: 1px solid #444;
    padding: 20px;
    font-size: 150%;
}


/* Box alignment align-items */


/* I have used a grid background image to show the grid in this example. I’ve defined 4 equal sized grid areas on the left which cover a square area inside three row and column lines.

I’m using the align-items property with a value of center. This centres the content of all of the grid items. */

.wrapper {
    display: grid;
    align-items: center;
    background: no-repeat url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/12005/grid.png);
    grid-gap: 10px;
    grid-template-columns: repeat(6, 150px);
    grid-template-rows: repeat( 4, 150px);
    background-color: #fff;
    color: #444;
}

.a {
    grid-column: 1 / 3;
    grid-row: 1 / 3;
}

.b {
    grid-column: 3 / 5;
    grid-row: 1 / 3;
}

.c {
    grid-column: 1 / 3;
    grid-row: 3 / 6;
}

.d {
    grid-column: 3 / 5;
    grid-row: 3 / 6;
}

.e {
    grid-column: 5 / 7;
    grid-row: 1 / 6;
    align-self: stretch;
    /* so box takes up whole space */
}


/* Box alignment justify-items */


/* I have used a grid background image to show the grid in this example. I’ve defined 4 equal sized grid areas on the left which cover a square area inside three row and column lines.

I’m using the justify-items property with a value of center. This centres the content of all of the grid items. */

.wrapper2 {
    display: grid;
    justify-items: center;
    background: no-repeat url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/12005/grid.png);
    grid-gap: 10px;
    grid-template-columns: repeat(6, 150px);
    grid-template-rows: repeat( 4, 150px);
    background-color: #fff;
    color: #444;
}


/* Box alignment align-self */


/* I have used a grid background image to show the grid in this example. I’ve defined 4 equal sized grid areas on the left which cover a square area inside three row and column lines.

I’m using the align-self property on individual grid items to demonstrate the different values. */

.wrapper3 {
    display: grid;
    background: no-repeat url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/12005/grid.png);
    grid-gap: 10px;
    grid-template-columns: repeat(6, 150px);
    grid-template-rows: repeat( 4, 150px);
    background-color: #fff;
    color: #444;
}

.a3 {
    grid-column: 1 / 3;
    grid-row: 1 / 3;
    align-self: stretch;
}

.b3 {
    grid-column: 3 / 5;
    grid-row: 1 / 3;
    align-self: end;
}

.c3 {
    grid-column: 1 / 3;
    grid-row: 3 / 6;
    align-self: start;
}

.d3 {
    grid-column: 3 / 5;
    grid-row: 3 / 6;
    align-self: center;
}

.e3 {
    grid-column: 5 / 7;
    grid-row: 1 / 6;
    align-self: stretch;
}


/* Box alignment justify-self */


/* I have used a grid background image to show the grid in this example. I’ve defined 4 equal sized grid areas on the left which cover a square area inside three row and column lines.

I’m using the justify-self property on individual grid items to demonstrate the different values. */


/* .wrapper is the same, wrapper3 */

.a4 {
    grid-column: 1 / 3;
    grid-row: 1 / 3;
    justify-self: stretch;
}

.b4 {
    grid-column: 3 / 5;
    grid-row: 1 / 3;
    justify-self: end;
}

.c4 {
    grid-column: 1 / 3;
    grid-row: 3 / 6;
    justify-self: start;
}

.d4 {
    grid-column: 3 / 5;
    grid-row: 3 / 6;
    justify-self: center;
}

.e4 {
    grid-column: 5 / 7;
    grid-row: 1 / 6;
    align-self: stretch;
}