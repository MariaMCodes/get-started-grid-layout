/* Alignment of the grid and grid items */

html {
    box-sizing: border-box;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    margin: 40px;
}


/* Aligning the Grid 

In this example I am creating a five column track grid, the tracks have absolute sizes and in total are smaller than the area of the grid container. Therefore we can align the grid inside the container - the default being start on both dimensions. */

.wrapper {
    margin: 0 0 20px 0;
    width: 500px;
    height: 400px;
    border: 2px solid #CCC;
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(4, 80px);
    grid-template-rows: repeat(3, 100px);
    justify-content: center;
    /* row */
    align-content: end;
    /* center */
}

.box {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.item1 {
    grid-column: 1 / 5;
}

.item2 {
    grid-column: 1 / 3;
    grid-row: 2 / 4;
}

.item3 {
    grid-column: 3 / 5;
}


/* Aligning the grid with space-around and space-between */


/* In this example I am creating a five column track grid, the tracks have absolute sizes and in total are smaller than the area of the grid container. This time I have used:

align-content: space-around
justify-content: space-between
This means that extra space is distributed around the tracks and our desired 10 pixel gutter gets more space. However so do any areas which span more than one track as where they cross a gutter they gain this extra space too. */

.wrapper2 {
    margin: 0 0 20px 0;
    width: 500px;
    height: 400px;
    border: 2px solid #CCC;
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(4, 80px);
    grid-template-rows: repeat(3, 100px);
    align-content: space-around;
    /* coliumn */
    justify-content: space-between;
    /* row - why items are sitting flush onto wrapper */
}

.box2 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.item1a {
    grid-column: 1 / 5;
}

.item2a {
    grid-column: 1 / 3;
    grid-row: 2 / 4;
}

.item3a {
    grid-column: 3 / 5;
}


/* Multiple tracks in a track-list with auto-fill and minmax() */


/* The repeat syntax can take a track-list rather than a single value, this means you can repeat a more complex track-list. You can use minmax() in this track list, here I am making the max of my larger tracks 2fr, and the smaller ones 1fr. This means that the larger tracks will have more of any leftover space assigned.

Currently requires Chrome Canary */

.box2:nth-child(even) {
    background-color: #ccc;
    color: #000;
}

.wrapper3 {
    display: grid;
    border: 1px solid #000;
    grid-gap: 10px;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr) minmax(200px, 2fr));
}


/* look what happens when resize the windown */


/* auto-fill vs. auto-fit */


/* In the first example we use the auto-fill keyword for repeat. We get as many tracks with a minimum of 200 pixels and maximum of 1fr as will fit in the container.

In the second example we use the auto-fit keyword for repeat. We get as many tracks with a minimum of 200 pixels and maximum of 1fr as will fit in the container.

After auto-placement any empty tracks are collapsed to 0. So our items can expand to take up the remaining space. */

.box3 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.box3:nth-child(even) {
    background-color: #ccc;
    color: #000;
}


/* auto-fill */

.wrapper4 {
    display: grid;
    border: 1px solid #000;
    grid-gap: 10px;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    margin-bottom: 2em;
}


/* auto-fit */

.wrapper5 {
    display: grid;
    border: 1px solid #000;
    grid-gap: 10px;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}


/* look what happens when resize the windown */