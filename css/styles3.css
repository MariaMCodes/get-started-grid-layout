/* Alignment of the grid and grid items */

html {
    box-sizing: border-box;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    margin: 40px;
}


/* Aligning the Grid 

In this example I am creating a five column track grid, the tracks have absolute sizes and in total are smaller than the area of the grid container. Therefore we can align the grid inside the container - the default being start on both dimensions. */

.wrapper {
    margin: 0 0 20px 0;
    width: 500px;
    height: 400px;
    border: 2px solid #CCC;
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(4, 80px);
    grid-template-rows: repeat(3, 100px);
    justify-content: center;
    /* row */
    align-content: end;
    /* center */
}

.box {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.item1 {
    grid-column: 1 / 5;
}

.item2 {
    grid-column: 1 / 3;
    grid-row: 2 / 4;
}

.item3 {
    grid-column: 3 / 5;
}


/* Aligning the grid with space-around and space-between */


/* In this example I am creating a five column track grid, the tracks have absolute sizes and in total are smaller than the area of the grid container. This time I have used:

align-content: space-around
justify-content: space-between
This means that extra space is distributed around the tracks and our desired 10 pixel gutter gets more space. However so do any areas which span more than one track as where they cross a gutter they gain this extra space too. */

.wrapper2 {
    margin: 0 0 20px 0;
    width: 500px;
    height: 400px;
    border: 2px solid #CCC;
    display: grid;
    grid-gap: 10px;
    grid-template-columns: repeat(4, 80px);
    grid-template-rows: repeat(3, 100px);
    align-content: space-around;
    /* coliumn */
    justify-content: space-between;
    /* row - why items are sitting flush onto wrapper */
}

.box2 {
    background-color: #444;
    color: #fff;
    border-radius: 5px;
    padding: 20px;
    font-size: 150%;
}

.item1a {
    grid-column: 1 / 5;
}

.item2a {
    grid-column: 1 / 3;
    grid-row: 2 / 4;
}

.item3a {
    grid-column: 3 / 5;
}